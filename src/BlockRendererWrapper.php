<?php


namespace HansSchouten\LaravelPageBuilder;



use PHPageBuilder\Modules\GrapesJS\Block\BaseController;
use PHPageBuilder\Modules\GrapesJS\Block\BaseModel;
use PHPageBuilder\Modules\GrapesJS\Block\BlockRenderer;
use PHPageBuilder\ThemeBlock;

class BlockRendererWrapper extends BlockRenderer
{
    /** @var ThemeWrapper */
    protected $theme;


    public function render($themeBlock, $blockData = null, $id = null)
    {
        return parent::render($themeBlock, $blockData, $id); // TODO: Change the autogenerated stub
    }

    public function renderScript(ThemeBlock $themeBlock, bool $forPageBuilder = false)
    {
        $scriptFilePath = $themeBlock->getScriptFile();
        if ($scriptFilePath) {
            if (pathinfo($scriptFilePath)['extension'] === 'php') {
                ob_start();
                require $scriptFilePath;
                $scriptHtmlString = ob_get_contents();
                ob_end_clean();
            } else {
                $scriptHtmlString = file_get_contents($scriptFilePath);
            }

            $script = $this->removeWrappedScriptTags($scriptHtmlString);
            if ($forPageBuilder) {
                return '<script>' . $script . '</script>';
            } else {
                return '<script>' . $script . '</script>';
            }
        }
        return '';
    }

    /**
     * Overrides the function to return view file
     *
     * @param ThemeBlockWrapper $themeBlock
     * @param $blockData
     * @return \Illuminate\Contracts\View\View;
     */
    protected function renderDynamicBlock($themeBlock, $blockData)
    {
        $blockData = $blockData ?? [];
        $controller = new BaseController;
        $model = new BaseModel($themeBlock, $blockData, $this->page, $this->forPageBuilder);

        if ($themeBlock->getModelFile()) {
            require_once $themeBlock->getModelFile();
            $modelClass = $themeBlock->getModelClass();
            $model = new $modelClass($themeBlock, $blockData, $this->page, $this->forPageBuilder);
        }

        if ($themeBlock->getControllerFile()) {
            require_once $themeBlock->getControllerFile();
            $controllerClass = $themeBlock->getControllerClass();
            $controller = new $controllerClass;
        }
        $controller->init($model, $this->page, $this->forPageBuilder);
        $html = $controller->handleRequest();
        if($html){
            return $html;
        }
        // init additional variables that should be accessible in the view
        $vars = [
            'renderer' => $this,
            'page' => $this->page,
            'block' => $model,
            'forPageBuilder' => $this->forPageBuilder,
        ];
        $themeName = $this->theme->getThemeSlug();
        $slug = $themeBlock->getSlug();
        // get the view name:
        $filePath = $themeBlock->getViewFile();
        $fileName = last(explode('/', $filePath));
        // remove the extension:
        $fileName = array_first(explode('.', $fileName));

        $namespace = 'pagebuilder::' . $themeName . '.blocks.' . $slug . '.' . $fileName;
        $html = view()->make($namespace, $vars);
        return $html;
    }


}