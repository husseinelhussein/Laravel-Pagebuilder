<?php
namespace HansSchouten\LaravelPageBuilder\Repositories;
use HansSchouten\LaravelPageBuilder\Page;
use Illuminate\Support\Facades\DB;
use PHPageBuilder\Contracts\PageContract;
use PHPageBuilder\Repositories\PageRepository as BaseRepository;
use Exception;

class PageRepository extends BaseRepository
{
    protected function createInstances(array $records)
    {
        return parent::createInstances($records); // TODO: Change the autogenerated stub
    }
    public function findWithId($id)
    {
        $table = config('pagebuilder.storage.database.prefix') . 'pages';
        $multi_saas_id = $this->getMultiSaasId();
        $res = DB::table($table)->where(['id' => $id, 'multi_saas_id' => $multi_saas_id])->first();
        $res = collect($res)->toArray();
        if(!$res){
            return null;
        }
        return $this->createInstance([$res]);
    }
    public function findWhere($column, $value)
    {
        $table = config('pagebuilder.storage.database.prefix') . 'pages';
        $multi_saas_id = $this->getMultiSaasId();
        $res = DB::table($table)->where(['multi_saas_id' => $multi_saas_id, $column => $value])->first();
        if(!$res){
            return null;
        }
        $res = collect($res)->toArray();
        return $this->createInstances([$res]);
    }

    /**
     * @inheritDoc
     */
    public function create(array $data)
    {
        foreach (['name', 'layout'] as $field) {
            if (! isset($data[$field]) || ! is_string($data[$field])) {
                return false;
            }
        }
        $multi_saas_id = $this->getMultiSaasId();
        $page = $this->superCreate([
            'name' => $data['name'],
            'layout' => $data['layout'],
            'meta' => isset($data['meta'])? $data['meta']: null,
            'multi_saas_id' => $multi_saas_id,
            'data' => isset($data['data'])? json_encode($data['data']): null,
            'created_at' => isset($data['created_at'])? $data['created_at']: null,
            'updated_at' => isset($data['updated_at'])? $data['updated_at']: null,
        ]);
        if (! ($page instanceof PageContract)) {
            throw new Exception("Page not of type PageContract");
        }
        return $this->replaceTranslations($page, $data);
    }

    /**
     * Duplicates a pagebuilder page instance along with its translations.
     * @param $id
     */
    public function duplicate($id){
        $stop = null;
        /** @var Page $page */
        $page = $this->findWithId($id);
        $stop = null;
        $translations = $page->getTranslations();
        $pb_data = [
            'layout' => $page->getLayout(),
            'title' => [],
            'route' => [],
            'meta' => json_encode($page->getMeta()),
            'data' => $page->getBuilderData(),
        ];
        foreach ($translations as $langCode => $translation) {
            foreach (array_keys($translation) as $prop) {
                if(is_int($prop)){
                    unset($translation[$prop]);
                }
            }
            $newTitle = $this->generateUniqueTitle($translation['title']);
            if(!isset($pb_data['name'])){
                $pb_data['name'] = $newTitle;
            }
            $pb_data['title'][$langCode] = $newTitle;
            $pb_data['route'][$langCode] = $this->generateUniqueRoute($translation['route']);
        }
        $pb_page = $this->create($pb_data);
        $m = 'Something went wrong, failed to create page';
        if(!$pb_page){
            throw new Exception($m);
        }
        $pb_page_tr_repo = new PageTranslationRepository;
        $pb_page = $pb_page_tr_repo->findWhere('route', $pb_data['route']);
        if(!$pb_page){
            throw new Exception($m);
        }
        return $this->findWithId($pb_page[0]->page_id);
    }

    /** Overrides parent to use PageTranslationRepository and add multi_saas_id
     * @param PageContract $page
     * @param array $data
     * @return bool
     */
    protected function replaceTranslations(PageContract $page, array $data)
    {
        $activeLanguages = phpb_active_languages();
        foreach (['title', 'route'] as $field) {
            foreach ($activeLanguages as $languageCode => $languageTranslation) {
                if (! isset($data[$field][$languageCode])) {
                    return false;
                }
            }
        }

        $pageTranslationRepository = new PageTranslationRepository();
        $pageTranslationRepository->destroyWhere(phpb_config('page.translation.foreign_key'), $page->getId());
        foreach ($activeLanguages as $languageCode => $languageTranslation) {
            $pageTranslationRepository->create([
                phpb_config('page.translation.foreign_key') => $page->getId(),
                'locale' => $languageCode,
                'title' => $data['title'][$languageCode],
                'route' => $data['route'][$languageCode],
                'multi_saas_id' => $this->getMultiSaasId(),
            ]);
        }

        return true;
    }

    protected function superCreate($data){
        $columns = array_keys($data);
        foreach ($columns as &$column) {
            $column = $this->removeNonAlphaNumeric($column);
        }
        $columns = implode(', ', $columns);
        $questionMarks = implode(', ', array_fill(0, sizeof($data), '?'));

        $this->db->query(
            "INSERT INTO {$this->table} ({$columns}) VALUES ({$questionMarks})",
            array_values($data)
        );

        $id = $this->db->lastInsertId();
        if ($id) {
            return $this->findWithId($id);
        }
        return null;
    }

    /**
     * @inheritDoc
     */
    public function update($page, array $data)
    {
        foreach (['name', 'layout'] as $field) {
            if (! isset($data[$field]) || ! is_string($data[$field])) {
                return false;
            }
        }

        $page->invalidateCache();
        $this->replaceTranslations($page, $data);

        return parent::update($page, [
            'name' => $data['name'],
            'layout' => $data['layout'],
            'meta' => isset($data['meta'])? $data['meta']: null,
        ]);
    }

    protected function getMultiSaasId(){
        $multi_saas_id = phpb_config('general.multi_saas_id');
        if(function_exists($multi_saas_id)){
            $multi_saas_id = call_user_func($multi_saas_id);
        }
        return $multi_saas_id;
    }

    protected function generateUniqueRoute($existingRoute) {
        $route = $this->generateUniqueColVal('route', $existingRoute);
        return $route;
    }

    protected function generateUniqueTitle($existingTitle) {
        $name = $this->generateUniqueColVal('title', $existingTitle, true);
        return $name;
    }

    protected function generateUniqueColVal($col, $exitingVal, $space = false){
        $pb_page_tr_repo = new PageTranslationRepository;
        $number = 2;
        do {
            $newVal = $exitingVal . '-' . $number;
            if($space){
                $newVal = $exitingVal . ' - ' . $number;
            }
            $pb_page = $pb_page_tr_repo->findWhere($col, $newVal);
            $number++;
        }
        while ( isset($pb_page) );
        return $newVal;
    }
}